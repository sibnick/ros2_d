Idl:
    Sentence    < (Comment / Include / Module)*
    Module      < "module" Name "{" (Module / Struct / Constant / Typedef / Empty)* "};"
    Struct      < Annotation* "struct" Name "{" GeneralMember* "};"
    GeneralMember < (ArrayMember / Member) ';'
    Member      < Annotation* Type Field
    ArrayMember < Annotation* ArrayType Field
    Include     < "#include" FileName
    AnnoContent < Type '=' (Text / Number)
    Annotation    < AnnoType '(' AnnoContent? (',' AnnoContent)* ')'
    Constant    < Annotation* "const" Type Field "=" AnyLiteral ";"
    Typedef     < Annotation* "typedef" Type ArrayField ";"

    Name        <- identifier
    Type        <- (identifier "::" identifier "::")? identifier
    ArrayType   <- "sequence" '<' Type '>'
    Field       <- identifier
    ArrayField  <- Field '[' Unsigned ']'
    Empty       <- eps
    FileName    <- StringLiteral
    Text        < StringLiteral StringLiteral*
    AnnoType  <- '@' identifier
    AnyLiteral  < (Text / Number)

    Comment <~ "//" (!endOfLine .)* endOfLine
    StringLiteral <~ doublequote (DQChar)* doublequote
    DQChar <- EscapeSequence
            / !doublequote .
    EscapeSequence <~ backslash ( quote
                                / doublequote
                                / backslash
                                / [abfnrtv]
                                )

    Scientific <~ Floating ( ('e' / 'E' ) Integer )?
    Floating   <~ Integer ('.' Unsigned )?
    Unsigned   <~ [0-9]+
    Integer    <~ Sign? Unsigned
    Binary     <~ "0b" [01] [01_]*
    Sign       <- '-' / '+'
    Number  <- (Binary / Scientific)
